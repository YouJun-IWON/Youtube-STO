generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id              String         @id @default(cuid())
  name            String?
  email           String?        @unique
  emailVerified  DateTime?
  image           String?
  role            User_role?
  user_type       User_user_type @default(User)
  username        String?
  wallet_addr     String?        @db.VarChar(64)
  created_at      DateTime       @default(now()) @db.DateTime(0)
  deleted_at      DateTime?      @db.DateTime(0)
  updated_at      DateTime       @default(now()) @db.DateTime(0)
  invitation_code String?
  active          Boolean        @default(false)
  identification  String?
  hashedPassword String?         @db.Text
  accounts        Account[]
  sessions        Session[]

  @@index([wallet_addr], map: "wallet_addr")
}


model ActiveOrder {
  id           Int      @id @default(autoincrement())
  order_id     Int?
  remain_qty   Float?   @db.Float
  updated_time DateTime @default(now()) @db.Timestamp(0)
}

model Announcement {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now()) @db.DateTime(0)
  deleted_at DateTime? @db.DateTime(0)
  updated_at DateTime  @default(now()) @db.DateTime(0)
  hit        Int       @default(0)
  title      String?   @db.Text
  contents   String?   @db.Text
}

model ChannelCategory {
  id   Int    @id @default(autoincrement())
  name String
}

model ChannelStatus {
  id   Int     @id @default(autoincrement())
  type String? @db.VarChar(255)
}

model Notification {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now()) @db.DateTime(0)
  user_id    String
  unread     Boolean   @default(true)
  deleted_at DateTime? @db.DateTime(0)

  @@index([user_id], map: "user_id")
}

model Order {
  id           Int           @id @default(autoincrement())
  st_id        Int
  price        Float         @db.Float
  qty          Float         @db.Float
  user_id      Int
  update_time  DateTime      @default(now()) @db.Timestamp(0)
  created_time DateTime      @default(now()) @db.Timestamp(0)
  status       Order_status?
  side         Order_side?
  type         Order_type?

  @@index([st_id], map: "ST_id")
  @@index([user_id], map: "order_user_id")
}

model OrderBook {
  id Int @id @default(autoincrement())
}

model SecurityToken {
  id            Int     @id @default(autoincrement())
  ticker_symbol String?
  issued_supply Int?
  issued_pct    Int?
  market_price  Int?
  price_tick    Int?
  qty_tick      Int?
  channel_id    Int?

  @@index([channel_id], map: "channel_id")
}

model SecurityTokenOffer {
  id              Int                        @id @default(autoincrement())
  st_id           Int?
  pct             Float?                     @db.Float
  per             Float?                     @db.Float
  offer_price     Int?
  offer_qty       Int?
  clained_qty     Int?
  participant_num Int?
  status          SecurityTokenOffer_status?
  announced_at    DateTime?                  @db.Timestamp(0)
  expired_at      DateTime?                  @db.Timestamp(0)

  @@index([st_id], map: "st_id")
}

model Setting {
  id       Int     @id @default(autoincrement())
  user_id  String
  example1 Boolean @default(false)

  @@index([user_id], map: "user_id")
}

model Wallet {
  addr         String @id @default("") @db.VarChar(64)
  owner_id     Int
  fiat_balance Int    @default(0)

  @@index([owner_id], map: "owner_id")
}

model WalletRelationship {
  id                Int    @id @default(autoincrement())
  owner_wallet_addr String @db.VarChar(64)
  st_id             Int
  qty               Float  @db.Float

  @@index([owner_wallet_addr], map: "owner_wallet_addr")
  @@index([st_id], map: "st_id")
}

model YoutubeChannel {
  id          Int                    @id @default(autoincrement())
  handle      String
  name        String
  channel_id  String?
  status      YoutubeChannel_status?
  created_at  DateTime               @default(now()) @db.DateTime(0)
  deleted_at  DateTime?              @db.DateTime(0)
  updated_at  DateTime               @default(now()) @db.DateTime(0)
  user_id     String?
  category_id Int                    @default(0)

  @@index([category_id], map: "channel_category")
  @@index([user_id], map: "user_id")
}

model YoutubeVideos {
  id             Int  @id @default(autoincrement())
  owner_id       Int
  view           Int  @default(0)
  yesterday_view Int? @default(0)

  @@index([owner_id], map: "owner")
}

model Trade {
  id             Int       @id @default(autoincrement())
  make_order_id  Int?
  qty            Float?    @db.Float
  time           DateTime? @db.Timestamp(0)
  price          Float?    @db.Float
  taker_order_id Int?

  @@index([make_order_id], map: "make_order_id")
  @@index([taker_order_id], map: "taker_order_id")
}

enum YoutubeChannel_status {
  ONSALE
  TRANSFER
  SOLDOUT
}

enum User_role {
  User
  Admin
  Youtuber
}

enum User_user_type {
  User
  Admin
  Youtuber
}

enum Order_side {
  BUY
  SELL
}

enum SecurityTokenOffer_status {
  NONE
}

enum Order_type {
  LIMIT
  MARKET
}

enum Order_status {
  NEW
  FILLED
  CANCEL
}
