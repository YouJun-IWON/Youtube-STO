generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model account_relationship {
  id               Int    @id @default(autoincrement())
  owner_account_id Int?
  ST_id            Int?
  size             Float? @db.Float
}

model accounts {
  id           Int  @id @default(autoincrement())
  owner_id     Int
  fiat_balance Int  @default(0)
  user         user @relation(fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "accounts_ibfk_1")

  @@index([owner_id], map: "owner_id")
}

model channel_status {
  id   Int     @id @default(autoincrement())
  type String? @db.VarChar(255)
}

model order {
  id                   Int                  @id @default(autoincrement())
  ST_id                Int
  price                Float                @db.Float
  size                 Float                @db.Float
  timestamp            DateTime             @default(now()) @db.DateTime(0)
  user_id              Int
  conclusion_at        DateTime?            @db.Timestamp(0)
  deleted_at           DateTime?            @db.Timestamp(0)
  updated_at           DateTime?            @default(now()) @db.Timestamp(0)
  created_at           DateTime?            @default(now()) @db.Timestamp(0)
  security_token_offer security_token_offer @relation(fields: [ST_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_ibfk_1")
  user                 user                 @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_ibfk_2")

  @@index([ST_id], map: "ST_id")
  @@index([user_id], map: "order_user_id")
}

model security_token_offer {
  id              Int             @id @default(autoincrement())
  supply          Float           @default(0) @db.Float
  per_valuation   Int             @default(0)
  channel_id      Int
  price           Int             @default(0)
  order           order[]
  youtube_channel youtube_channel @relation(fields: [channel_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "security_token_offer_ibfk_1")

  @@index([channel_id], map: "channel_id")
}

model user {
  id         Int        @id @default(autoincrement())
  username   String     @db.VarChar(255)
  name       String     @db.VarChar(255)
  account_id Int?
  cash_role_ Int        @default(0) @map("cash(role)")
  peer_id    Int?
  email      String?    @db.VarChar(255)
  accounts   accounts[]
  order      order[]
}

model youtube_channel {
  id                   Int                    @id @default(autoincrement())
  handle               String                 @db.VarChar(255)
  name                 String                 @db.VarChar(255)
  channel_id           String                 @db.VarChar(255)
  status_id            Int?
  created_at           DateTime?              @default(now()) @db.Timestamp(0)
  security_token_offer security_token_offer[]
  youtube_videos       youtube_videos[]
}

model youtube_videos {
  id              Int             @id @default(autoincrement())
  owner_id        Int
  youtube_channel youtube_channel @relation(fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "youtube_videos_ibfk_1")

  @@index([owner_id], map: "owner")
}
